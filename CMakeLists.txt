# needed by the file function
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(SpeakEasy)

LIST(APPEND STARS_MESSAGE "***************")
LIST(APPEND INFO_MESSAGE  "Build SpeakEasy")

# see full compilation lines
# SET(CMAKE_VERBOSE_MAKEFILE 1)

# add color on CMake output
SET(CMAKE_COLOR_MAKEFILE ON)

# set the destination of the executable
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})

# tell cmake to check for custom modules
SET(CMAKE_MODULE_PATH "${SpeakEasy_SOURCE_DIR}/cmake_modules")

################################################################################
# Check if compiler supports c++11 variadic templates
INCLUDE(CheckCXXSourceCompiles)

CHECK_CXX_SOURCE_COMPILES("
    template<typename... Types>
    void log(const Types&...){}
    int main() {
        return 0;
    }
    " VARIADIC_TEMPLATES_SUPPORTED)

IF(NOT VARIADIC_TEMPLATES_SUPPORTED)
    # TODO: use CMakeDetermineCompilerId instead of CMAKE_GENERATOR
    # to find out the compiler's id
    MESSAGE(AUTHOR_WARNING
            "Variadic templates are not supported by ${CMAKE_GENERATOR},"
            " the code will use regular templates instead")
ENDIF()
################################################################################

################################################################################
# Build options
OPTION(BUILD_TESTS         "Build Tests"         ON)
OPTION(BUILD_DOCUMENTATION "Build Documentation" ON)

FIND_PACKAGE(OpenGL REQUIRED)

# Either GLFW or SFML2 is possible, but one of them is mandatory
FIND_PACKAGE(GLFW)
FIND_PACKAGE(SFML 2 COMPONENTS window)

IF(GLFW_FOUND)
    LIST(APPEND STARS_MESSAGE "*************")
    LIST(APPEND INFO_MESSAGE  " - Using GLFW")
    SET(USE_GLFW 1)
ELSEIF(SFML_FOUND)
    LIST(APPEND STARS_MESSAGE "*************")
    LIST(APPEND INFO_MESSAGE  " - Using SFML")
    SET(USE_SFML2 1)
ELSE()
    MESSAGE(FATAL_ERROR "GLFW or SFML2 is required to build SpeakEasy")
ENDIF()
################################################################################

################################################################################
# generate a header file to inform the code of various settings
# set the edit warning message to be inserted in the header
SET(EDIT_WARNING "This file is autogenerated, please do not edit")
CONFIGURE_FILE(${SpeakEasy_SOURCE_DIR}/src/config.h.cmake
               ${SpeakEasy_BINARY_DIR}/src/config.h)
################################################################################

################################################################################
# Documentation
IF(BUILD_DOCUMENTATION)
    # add a target to generate API documentation with Doxygen
    FIND_PACKAGE(Doxygen)

    IF(DOXYGEN_FOUND)
        LIST(APPEND STARS_MESSAGE "*****************")
        LIST(APPEND INFO_MESSAGE  " - Doxygen target")
        CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in
                       ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
        ADD_CUSTOM_TARGET(doc
                          ${DOXYGEN_EXECUTABLE}
                          ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
                          WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                          COMMENT "Generating documentation with Doxygen" VERBATIM)
    ENDIF()
ENDIF()
################################################################################

################################################################################
# Enable max compiler debugging output
IF(MSVC) # Visual Studio
    SET(CMAKE_CXX_WARNING_LEVEL 4)
    # Force it, because most of the time the above line is not enough
    IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
        STRING(REGEX REPLACE "/W[0-4]" "/W4"
               CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    ELSE()
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
    ENDIF()
ENDIF()

IF(UNIX)
    # Enable c++11
    ADD_DEFINITIONS(-std=c++11)
    # Enable a LOT of warnings
    ADD_DEFINITIONS(-Wall
                    -Wextra
                    -W
                    -Wpadded
                    -Wshadow
                    -Woverloaded-virtual
                    -Wwrite-strings)
ENDIF()
################################################################################

ADD_SUBDIRECTORY(src)

################################################################################
# CPack
SET(CPACK_PACKAGE_VERSION_MAJOR "0")
SET(CPACK_PACKAGE_VERSION_MINOR "0")
SET(CPACK_PACKAGE_VERSION_PATCH "1")

SET(CPACK_SOURCE_GENERATOR "TBZ2")

SET(CPACK_SOURCE_PACKAGE_FILE_NAME
    "${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")

SET(CPACK_SOURCE_IGNORE_FILES
    "/build/;~$;/.git;kdev;${CPACK_SOURCE_IGNORE_FILES}")

# Must be included *AFTER* setting its properties
INCLUDE(CPack)
################################################################################

################################################################################
# Tests
IF(BUILD_TESTS)
    LIST(APPEND STARS_MESSAGE "*************")
    LIST(APPEND INFO_MESSAGE  " - Unit Tests")
    ENABLE_TESTING()
    ADD_SUBDIRECTORY(tests)
ENDIF()
################################################################################

MESSAGE(STATUS ${STARS_MESSAGE})
MESSAGE(STATUS ${INFO_MESSAGE})
MESSAGE(STATUS ${STARS_MESSAGE})

