#include "uSE_Quaternion.h"


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uSE_Quaternion::uSE_Quaternion()
{
    m_real = 0;
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uSE_Quaternion::uSE_Quaternion( float inReal, uSE_GLVector inVector ):
    m_real(inReal),
    m_vector(inVector)
{
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uSE_Quaternion::~uSE_Quaternion()
{
    m_real = 0;
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uSE_Quaternion uSE_Quaternion::opposite()
{
    return uSE_Quaternion(-m_real, m_vector.getOpposite());
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uSE_Quaternion uSE_Quaternion::conjugation()
{
    return uSE_Quaternion(m_real, m_vector.getOpposite());
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uSE_Quaternion uSE_Quaternion::reciprocal()
{
    float tmp;
    getNorm(tmp);
    return ( conjugation() * (float)(1.f/tmp) );
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void uSE_Quaternion::getNorm( float& outNorm )
{
    float tmp;
    m_vector.getNormSquared(tmp);
    outNorm = m_real*m_real + tmp;
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uSE_Quaternion uSE_Quaternion::operator+  ( const uSE_Quaternion &inQuaternion )
{
    return uSE_Quaternion( m_real + inQuaternion.m_real, m_vector + inQuaternion.m_vector);
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uSE_Quaternion uSE_Quaternion::operator*  ( const float &inValue )
{
    return uSE_Quaternion(m_real * inValue, m_vector * inValue );
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uSE_Quaternion uSE_Quaternion::operator*  ( const uSE_Quaternion &inQuaternion )
{
    return uSE_Quaternion ( m_real * inQuaternion.m_real - m_vector * inQuaternion.m_vector,
                           (m_vector ^ inQuaternion.m_vector)
                           + (uSE_GLVector)inQuaternion.m_vector * m_real
                           + m_vector * inQuaternion.m_real);
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool uSE_Quaternion::operator== ( const uSE_Quaternion &inQuaternion )
{
    return (m_real == inQuaternion.m_real && m_vector == inQuaternion.m_vector);
}
