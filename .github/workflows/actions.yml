# Sharpmake GitHub Actions CI configuration

name: build
on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    # Run at 02:17 every day
    - cron: '17 2 * * *'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        configuration: [Debug, Release]

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install dependencies on linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libgl1-mesa-dev libglx-dev libglu1-mesa-dev libopengl-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake - ${{ matrix.configuration }}
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.configuration }}

      - name: Build in ${{ matrix.configuration }}
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --parallel --config ${{ matrix.configuration }}

      - name: Test
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        run: ctest
